<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Doom-like 3D Prototype (Fixed)</title>
<style>
  body { margin:0; overflow:hidden; background:#111; font-family:Arial; color:white; }
  #crosshair {
    position:absolute;
    top:50%;
    left:50%;
    width:20px;
    height:20px;
    margin-left:-10px;
    margin-top:-10px;
    pointer-events:none;
  }
  #crosshair:after {
    content:'';
    position:absolute;
    top:9px;
    left:0;
    width:20px;
    height:2px;
    background:red;
  }
  #crosshair:before {
    content:'';
    position:absolute;
    left:9px;
    top:0;
    width:2px;
    height:20px;
    background:red;
  }
</style>
</head>
<body>
<div id="crosshair"></div>

<!-- Three.js -->
<script src="https://cdn.jsdelivr.net/npm/three@0.155.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.155.0/examples/js/controls/PointerLockControls.js"></script>

<script>
  // Scene + Camera
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0x222222);

  const camera = new THREE.PerspectiveCamera(
    75, window.innerWidth / window.innerHeight, 0.1, 1000
  );
  camera.position.set(0, 1.6, 5); // player eye height

  // Renderer
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  // Lights
  const light = new THREE.DirectionalLight(0xffffff, 1);
  light.position.set(5, 10, 5);
  scene.add(light);
  scene.add(new THREE.AmbientLight(0x404040));

  // Floor
  const floorGeometry = new THREE.PlaneGeometry(50, 50);
  const floorMaterial = new THREE.MeshPhongMaterial({ color: 0x444444 });
  const floor = new THREE.Mesh(floorGeometry, floorMaterial);
  floor.rotation.x = -Math.PI / 2;
  scene.add(floor);

  // Walls
  function makeWall(x, z, w, h, d) {
    const wallGeometry = new THREE.BoxGeometry(w, h, d);
    const wallMaterial = new THREE.MeshPhongMaterial({ color: 0x888888 });
    const wall = new THREE.Mesh(wallGeometry, wallMaterial);
    wall.position.set(x, h/2, z);
    scene.add(wall);
  }
  makeWall(-10, 0, 1, 3, 20);
  makeWall(10, 0, 1, 3, 20);
  makeWall(0, -10, 20, 3, 1);
  makeWall(0, 10, 20, 3, 1);

  // Enemies
  const enemyGeometry = new THREE.BoxGeometry(1, 1, 1);
  const enemyMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
  let enemies = [];
  for (let i = 0; i < 5; i++) {
    let enemy = new THREE.Mesh(enemyGeometry, enemyMaterial);
    enemy.position.set(Math.random()*10-5, 0.5, Math.random()*10-5);
    scene.add(enemy);
    enemies.push(enemy);
  }

  // Controls (Pointer Lock FPS)
  const controls = new THREE.PointerLockControls(camera, document.body);
  document.body.addEventListener("click", () => controls.lock());

  let moveForward = false, moveBackward = false, moveLeft = false, moveRight = false;
  const speed = 0.1;

  document.addEventListener("keydown", e => {
    if (e.code === "KeyW") moveForward = true;
    if (e.code === "KeyS") moveBackward = true;
    if (e.code === "KeyA") moveLeft = true;
    if (e.code === "KeyD") moveRight = true;
  });
  document.addEventListener("keyup", e => {
    if (e.code === "KeyW") moveForward = false;
    if (e.code === "KeyS") moveBackward = false;
    if (e.code === "KeyA") moveLeft = false;
    if (e.code === "KeyD") moveRight = false;
  });

  // Shooting
  document.addEventListener("mousedown", () => {
    const raycaster = new THREE.Raycaster();
    raycaster.setFromCamera(new THREE.Vector2(0, 0), camera);
    const intersects = raycaster.intersectObjects(enemies);
    intersects.forEach(obj => {
      scene.remove(obj.object);
      enemies = enemies.filter(e => e !== obj.object);
    });
  });

  // Game Loop
  function animate() {
    requestAnimationFrame(animate);

    if (controls.isLocked) {
      let dir = new THREE.Vector3();
      if (moveForward) dir.z -= speed;
      if (moveBackward) dir.z += speed;
      if (moveLeft) dir.x -= speed;
      if (moveRight) dir.x += speed;
      controls.moveRight(dir.x);
      controls.moveForward(dir.z);
    }

    // Enemy AI: move toward player
    enemies.forEach(e => {
      let dir = new THREE.Vector3();
      dir.subVectors(camera.position, e.position).normalize();
      e.position.add(dir.multiplyScalar(0.02));
    });

    renderer.render(scene, camera);
  }
  animate();

  // Resize handling
  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });
</script>
</body>
</html>
